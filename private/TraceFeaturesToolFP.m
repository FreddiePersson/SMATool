%%%%%%%%%%%%%%%%%%
% Main functions %
% ============== %
%%%%%%%%%%%%%%%%%%
function TraceFeaturesTool(varargin)
	
	% Figure
	hFig = figure(...
		'Units','pixels',...
		'Tag','hTFT',...
		'MenuBar','none',...
		'Toolbar','none',...
		'NumberTitle','off',...
		'Visible','off',...
		'Position',[0 0 1 1],...
		'Resize','off',...
		'Colormap',hot);
	drawTraceFeaturesContent(hFig);
	
	% Load or import data
	LoadData(varargin);
	
	% Move and make visible.
	movegui(hFig,'north')
	set(hFig,'Visible','on');
	
	
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Draw GUI content functions %
% ========================== %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function drawTraceFeaturesContent(hObject,varargin)
	
	set(hObject,'Name','SMATool - Trace Features Tool (TFT)')
	
	% Dimensions
	aw = 400;
	
	th = 20;
	
	brh = 47;
	ttdH = 30 + 370 + 30 + 150 + 30;
	filtH = 25 + 4*(th+5) + 5;
	featureH = 25 + 5*(23+3) + 5;
	currentFH = ttdH - (filtH + 10 + featureH + 10);
		
	y1 = brh + 10;
	y2 = y1 + filtH + 10;
	y3 = y2 + featureH + 10;
	
	rH = brh + 10 + filtH + 10 + featureH + 10 + currentFH + 20;
	lH = brh + 10 + ttdH + 20;
	
	w = 20 + aw + 20 + aw + 20;
	h = max(rH,lH);
	
	set(hObject,'Position',[0 0 w h]);
	
	% Button Row Panel
	hButtonPanel = uibuttongroup(...
		'Parent',hObject,...
		'Tag','TFT_panel_buttonRow',...
		'Units','pixels',...
		'BackgroundColor',get(hObject,'Color'),...
		'visible','on',...
		'BorderType','none',...
		'Position',[0 0 w brh]);
	uiButtonRowPanel(hButtonPanel);
	
	% Time Trace Display Panel
	hTimeTracePanel = uibuttongroup(...
		'Parent',hObject,...
		'Tag','TFT_panel_timeTraceDisplay',...
		'Title','Time Trace Display',...
		'FontSize',10,...
		'Units','pixels',...
		'BackgroundColor',get(hObject,'Color'),...
		'Position',[20 y1 round(w/2)-30 ttdH]);
	uiTimeTraceDisplayPanel(hTimeTracePanel);
	
	% Filtering Panel
	hFilterPanel = uibuttongroup(...
		'Parent',hObject,...
		'Units','pixels',...
		'Title','Data Filtering',...
		'BackgroundColor',get(hObject,'Color'),...
		'FontSize',10,...
		'Position',[round(w/2)+10 y1 round(w/2)-30 filtH],...
		'Tag','TF_FilterPanel');
	uiFilterPanel(hFilterPanel);
	%set(findobj(get(hFilterPanel,'Children'),'Enable','on'),'Enable','off');
	
	% Features Controls Panel
	hFeaturesControlPanel = uibuttongroup(...
		'Parent',hObject,...
		'Units','pixels',...
		'Title','Features Control',...
		'BackgroundColor',get(hObject,'Color'),...
		'FontSize',10,...
		'Position',[round(w/2)+10 y2 round(w/2)-30 featureH],...
		'Tag','tft_panel_FeaturesControlPanel');
	uiFeaturesControlPanel(hFeaturesControlPanel);
	%set(findobj(get(hTracePanel,'Children'),'Enable','on'),'Enable','off');
	
	% Current Frame Display Panel
	hCurrentFramePanel = uibuttongroup(...
		'Parent',hObject,...
		'Tag','TFT_panel_currentFrameDisplay',...
		'Title','Current Frame Display',...
		'FontSize',10,...
		'Units','pixels',...
		'BackgroundColor',get(hObject,'Color'),...
		'Position',[round(w/2)+10 y3 round(w/2)-30 currentFH]);
	uiCurrentFrameDisplayPanel(hCurrentFramePanel);
	
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Panel construction functions %
% ============================ %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function uiButtonRowPanel(hObject,eventdata,varargin)
	
	% Dimensions
	pos = get(hObject,'Position');
	
	w = pos(3);
	h = pos(4);
	
	bw = 80; bh = 25;
	
	x1 = 40;
	
	% Close button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Close',...
		'TooltipString','Closes the window.',...
		'Position',[w-(bw+40) 10 bw bh],...
		'Callback',{@CloseButton});

	% Load MAT button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Load MAT',...
		'TooltipString','Loads a new file.',...
		'Position',[w-(2*bw+40) 10 bw bh],...
		'Callback',{@LoadButton},...
		'Enable', 'off');		

	% Load TIF button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Load TIF',...
		'TooltipString','Loads a new file.',...
		'Position',[w-(3*bw+40) 10 bw bh],...
		'Callback',{@LoadButton},...
		'Enable', 'on');

	% Revert button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Revert',...
		'TooltipString','Reverts to original data.',...
		'Position',[w-(6*bw+50) 65 bw bh],...
		'Callback',{@RevertButton},...
		'Enable','off');
	
	% Step back button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Step Back',...
		'TooltipString','Reverts back one step.',...
		'Position',[w-(7*bw+50) 65 bw bh],...
		'Callback',{@BackButton},...
		'Enable','off');
	
	% Align button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Align',...
		'TooltipString','Aligns and stretches the data from the trace.',...
		'Position',[w-(8*bw+50) 65 bw bh],...
		'Callback',{@AlignButton},...
		'Enable','off');
    
% 	% Save MAT button
% 	uicontrol(...
% 		'Parent',hObject,...
% 		'Units','pixels',...
% 		'Style','pushbutton',...
% 		'String','Save MAT',...
% 		'TooltipString','Saves the Matlab workspace.',...
% 		'Position',[w-(8*bw+40) 10 bw bh],...
% 		'Callback',{@LoadButton},...
% 		'Enable', 'off');	

	% Save CSV button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Save Profile',...
		'TooltipString','Saves the mean curve just as it looks, ie with filtering etc.',...
		'Position',[w-(9*bw+40) 10 bw bh],...
		'Callback',{@SaveCSVButton},...
		'Enable', 'off');
	 
	% Save TIF button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Save TIF',...
		'TooltipString','Saves the aligned timetrace, no filtering.',...
		'Position',[w-(10*bw+40) 10 bw bh],...
		'Callback',{@SaveTIFButton},...
		'Enable', 'on');
	
end
function uiTimeTraceDisplayPanel(hObject,eventdata,varargin)
	
	% Dimensions
	pos = get(hObject,'Position');
	
	w = pos(3);
	
	th = 20;
	
	ah1 = 300; ah2 = 150;
	
	h = 30 + ah2 + 30 + ah1 + 30;
	 
	% Variables
	nFeatures = 10;
	current = ones(10);
	stretched = ones(10);
	molL = size(current,2);
	nFrames = size(current,1);
	fNr = 1;
	fNrSel = [1 nFrames];
	intLim = [0 1];
	peakFeatures = ones(1,5);
	sinkFeatures = ones(1,4);
	peakSizeEdge = ones(1,10);
	traceFeatures = zeros(nFrames,nFeatures);
	stretchFeatures = zeros(nFrames,nFeatures);
	
	% Trace Axes
	hTraceAxes = axes(...
		'Parent',hObject,...
		'Units','pixels',...
		'Tag','tft_axes_trace',...
		'Position',[30 h-(ah1+30+50) w-(30+30) ah1],...
		'Visible','on');
	
	% Current image
	imagesc(...
		current,...
		'Parent',hTraceAxes,...
		'Tag','tft_imgsc_trace');
	axis(hTraceAxes,'off','tight');
	
	% Current frame line
	hCF = line(...
		'Parent',hTraceAxes,...
		'XData',[1 molL],...
		'YData',fNr.*[1 1],...
		'Color','k',...
		'LineWidth',2,...
		'Tag','tft_line_fNr');
	
	% Frame selection lines
	hFS(1) = line(...
		'Parent',hTraceAxes,...
		'XData',[1 molL],...
		'YData',fNrSel(1).*[1 1],...
		'Color','b',...
		'LineWidth',2,...
		'Tag','tft_line_fNr1');
	hFS(2) = line(...
		'Parent',hTraceAxes,...
		'XData',[1 molL],...
		'YData',fNrSel(2).*[1 1],...
		'Color','b',...
		'LineWidth',2,...
		'Tag','tft_line_fNr2');
	
	% Set legend for trace axes using annotation groups
	hal = line(... % Dummy line for annotation
		'Parent',hTraceAxes,...
		'XData',[0 0],...
		'YData',[0 0],...
		'Color','k',...
		'Marker','s',...
		'MarkerEdgeColor','b',...
		'LineWidth',1,...
		'Visible','off');
	gh(1) = hggroup;
	gh(2) = hggroup;
	gh(3) = hggroup;
	set(hCF,'Parent',gh(1));
	set(hFS,'Parent',gh(2));
	set(hal,'Parent',gh(3));
	
	set(get(get(gh(1),'Annotation'),'LegendInformation'),...
		 'IconDisplayStyle','on'); % Include this hggroup in the legend
	set(get(get(gh(2),'Annotation'),'LegendInformation'),...
		 'IconDisplayStyle','on'); % Include this hggroup in the legend
	set(get(get(gh(3),'Annotation'),'LegendInformation'),...
		 'IconDisplayStyle','on'); % Include this hggroup in the legend
	
	hA = get(gh,'Annotation');
	hLL = get([hA{:}],'LegendInformation');
	set([hLL{:}],{'IconDisplayStyle'},...
		{'on','on','on'}')
	set(gh,{'DisplayName'},{...
		'Current Frame (change by dragging dot)',...
		'Mean Interval (change by dragging dots)',...
		'Traced Features'}');
	l1 = legend('show');
	set(l1,...
		'Location','NorthOutside',...
		'Box','off',...
		'Color','none',...
		'TextColor','k',...
		'FontName',get(hObject,'FontName'),...
		'FontSize',get(hObject,'FontSize'));
	set(hTraceAxes,'Position',[30 h-(ah1+30) w-(30+30) ah1]);
	
	% Feature lines
	for i = 1:nFeatures
		hFeatures(i) = line(...
			'Parent',hTraceAxes,...
			'XData',traceFeatures(:,i),...
			'YData',1:nFeatures,...
			'Color','k',...
			'Marker','s',...
			'MarkerEdgeColor','b',...
			'LineWidth',1);
	end
	set(hFeatures,'Visible','off');
	
	% Add frame number selection tools axes
	hFNSelAxes = axes(...
		'Parent',hObject,...
		'Tag','tft_axes_fNrSel',...
		'Units','pixels',...
		'Position',[25 h-(ah1+30) 5 ah1],...
		'Visible','on',...
		'Color','none',...
		'XLim',[0 1],...
		'YLim',[1 10]);
	axis(hFNSelAxes,'off');
	
	% Add current frame number selection tools axes
	hCFNSelAxes = axes(...
		'Parent',hObject,...
		'Tag','tft_axes_fNr',...
		'Units','pixels',...
		'Position',[w-(30) h-(ah1+30) 5 ah1],...
		'Visible','on',...
		'Color','none',...
		'XLim',[-1 0],...
		'YLim',[1 10]);
	axis(hCFNSelAxes,'off');
	
	% Selection tools
	hSelTool(1) = impoint(hFNSelAxes,[0 fNrSel(1)]);
	hSelTool(2) = impoint(hFNSelAxes,[0 fNrSel(2)]);
	hSelTool(3) = impoint(hCFNSelAxes,[0 fNr]);
	
	setColor(hSelTool(1),'b');
	setColor(hSelTool(2),'b');
	setColor(hSelTool(3),'k');

	
	hConFcn = makeConstrainToRectFcn('impoint',[0 0].*.5,[1 10]);
	
	setPositionConstraintFcn(hSelTool(1),hConFcn);
	setPositionConstraintFcn(hSelTool(2),hConFcn);
	setPositionConstraintFcn(hSelTool(3),hConFcn);
	
	addNewPositionCallback(hSelTool(1),@FrameSelectionChange1);
	addNewPositionCallback(hSelTool(2),@FrameSelectionChange2);
	addNewPositionCallback(hSelTool(3),@FrameSelectionChange3);
	
	% Mean Intensity Axes
	hMeanIntAxes = axes(...
		'Parent',hObject,...
		'Units','pixels',...
		'Tag','tft_axes_meanInt',...
		'Position',[30 30 w-(30+30) ah2],...
		'Visible','on',...
		'Color','none');
	set(hMeanIntAxes,...
		'Title',text('String','	 Mean of Trace	 '),...
		'XLim',[1 molL],...
		'YLim',intLim,...
		'Color','none',...
		'DrawMode','fast');
	axis(hMeanIntAxes,'off');
	
	% Mean intensity lines
	line(...
		'Parent',hMeanIntAxes,...
		'Tag','tft_line_meanInt',...
		'XData',1:molL,...
		'YData',.5.*ones(size(1:molL)),...
		'Color','k',...
		'LineWidth',1);
	line(...
		'Parent',hMeanIntAxes,...
		'Tag','tft_line_std1',...
		'XData',1:molL,...
		'YData',.5.*ones(size(1:molL)),...
		'Color','r',...
		'LineStyle','--',...
		'LineWidth',1);
	line(...
		'Parent',hMeanIntAxes,...
		'Tag','tft_line_std2',...
		'XData',1:molL,...
		'YData',.5.*ones(size(1:molL)),...
		'Color','r',...
		'LineStyle','--',...
		'LineWidth',1);
	l1 = legend(hMeanIntAxes,...
		'Mean','STD');
	set(l1,...
		'Location','NorthEast',...
		'Box','off',...
		'Color','none',...
		'TextColor','k');
		
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
	% Store all GUI data
	data.tft.current = current;
	data.tft.stretched = stretched;
	data.tft.molL = molL;
	data.tft.nFrames = nFrames;
	data.tft.fNr = fNr;
	data.tft.fNrSel = fNrSel;
	data.tft.intLim = intLim;
	data.tft.peakFeatures = peakFeatures;
	data.tft.sinkFeatures = sinkFeatures;
	data.tft.peakSizeEdge = peakSizeEdge;
	data.tft.removeMean = false;
	data.tft.traceFeatures = traceFeatures;
	data.tft.stretchFeatures = stretchFeatures;
	data.tft.nFeatures = nFeatures;
	
	data.tft.hFeatures = hFeatures;
	data.tft.hSelTool = hSelTool;
	
	guidata(findobj('Tag','hSMAT'),data);
	
end
function uiCurrentFrameDisplayPanel(hObject,eventdata,varargin)
	
	% Dimensions
	pos = get(hObject,'Position');
	
	w = pos(3); h = pos(4);
	
	aw = w - 60; ah = h - 60;
	
	bw = 100;
	
	tw = w - (10 + bw + 10 + 5);
	 
	eh = 15;

	x1 = 140;
	
	y1 = h - (205 + 3*eh);
	y2 = y1 - eh;
	y3 = y2 - eh;
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	molL = data.tft.molL;
	intLim = data.tft.intLim;
	
	% Current Frame Axes
	hCurrentFrameAxes = axes(...
		'Parent',hObject,...
		'Tag','tft_axes_currentFrame',...
		'Units','pixels',...
		'Position',[30 15 aw ah],...
		'Visible','on');
	set(hCurrentFrameAxes,...
		'Title',text('String',sprintf('	Current Frame (%g)  ',1)),...
		'XLim',[1 molL],...
		'YLim',intLim,...
		'Color','none',...
		'DrawMode','fast');
	axis(hCurrentFrameAxes,'off',[1 molL intLim]);
	
	% Draw Lines
	line(...
		'Parent',hCurrentFrameAxes,...
		'XData',1:molL,...
		'YData',.5.*ones(size(1:molL)),...
		'Color','k',...
		'Tag','tft_line_currentInt');
	line(...
		'Parent',hCurrentFrameAxes,...
		'XData',[0 0],...
		'YData',[0 0],...
		'Color','m',...
		'Marker','^',...
		'MarkerSize',6,...
		'LineStyle','none',...
		'Tag','tft_line_peakFeatureMarker');
	line(...
		'Parent',hCurrentFrameAxes,...
		'XData',[0 0],...
		'YData',[0 0],...
		'Color','m',...
		'Marker','v',...
		'MarkerSize',6,...
		'LineStyle','none',...
		'Tag','tft_line_sinkFeatureMarker');
	line(...
		'Parent',hCurrentFrameAxes,...
		'XData',[0 0],...
		'YData',[0 0],...
		'Color','m',...
		'Marker','o',...
		'MarkerEdgeColor','m',...
		'MarkerFaceColor','m',...
		'MarkerSize',3,...
		'LineStyle','none',...
		'Tag','tft_line_peakSize');
	l1 = legend(hCurrentFrameAxes,...
		'Intensity',...
		'Peak',...
		'Sink',...
		'Peak edges');
	set(l1,...
		'Tag','tft_legend_currentFrame',...
		'Location','SouthOutside',...
		'Box','off',...
		'Color','none',...
		'TextColor','k');

	% Show peak features
	uicontrol(...
		'Parent',hObject,...
		'Style','checkbox',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'String','',...
		'Value',true,...
		'TooltipString','Check to show detected peaks.',...
		'Position',[x1 y1 tw+tw eh],...
		'Tag','att_ckbx_showPeaks',...
		'Callback',{@AdjustImage, 'gaussian'},...
		'Enable','on');
	 
	% Show valley features
	uicontrol(...
		'Parent',hObject,...
		'Style','checkbox',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'String','',...
		'Value',false,...
		'TooltipString','Check to show detected valleys.',...
		'Position',[x1 y2 tw+tw eh],...
		'Tag','att_ckbx_showValleys',...
		'Callback',{@AdjustImage, 'gaussian'},...
		'Enable','on');
	 
	% Show edge features
	uicontrol(...
		'Parent',hObject,...
		'Style','checkbox',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'String','',...
		'Value',false,...
		'TooltipString','Check to show detected edges.',...
		'Position',[x1 y3 tw+tw eh],...
		'Tag','att_ckbx_showEdges',...
		'Callback',{@AdjustImage, 'gaussian'},...
		'Enable','on');

	% Add Intensity Threshold Selection Tool
	%Initial relative intensity threshold
	relIntTh = 0.1;

	ThSelAxes = axes(...
		'Parent',hObject,...
		'Tag','tft_ThSelAxes',...
		'Units','pixels',...
		'Position',get(hCurrentFrameAxes,'Position'),...
		'Visible','on',...
		'Color','none',...
		'XLim',[1 100],...
		'YLim',[0 1]);
	axis(ThSelAxes,'off');
	line([1 0],[relIntTh relIntTh],...
		'Parent',ThSelAxes,...
		'Color','k',...
		'LineStyle',':',...
		'Tag','tft_selTool_Th')
	
	% Selection tools
	SelTh = impoint(ThSelAxes,[100 relIntTh]);
	setColor(SelTh,'k');
	ConFcnTh = makeConstrainToRectFcn('impoint',[100 100],[0 1]);
	setPositionConstraintFcn(SelTh,ConFcnTh);
	addNewPositionCallback(SelTh,@IntensityThresholdChange);

	% Store all GUI data
	data.tft.relIntTh = relIntTh;
	data.tft.SelTh = SelTh;
	guidata(findobj('Tag','hSMAT'),data);
	
end
function uiFeaturesControlPanel(hObject,eventdata,varargin)
	
	pos = get(hObject,'Position');
	
	% Dimensions
	w = pos(3); h = pos(4);
	
	bw = 100; bh = 20;
	
	lw = 55;
	tw = w - (10 + bw + 10 + 5); th = 20;
	
	ew = bw-lw; eh = 23;
	
	x1 = 10;
	x2 = x1 + 5 + bw;
	
	y1 = h - (25 + eh);
	y2 = y1 - eh - 3;
	y3 = y2 - eh - 3;
	y4 = y3 - eh - 3;
	y5 = y4 - eh - 3;
	y6 = y5 - eh - 3;
	
	% Remove mean button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Remove Mean',...
		'Position',[x1 y1 bw bh],...
		'Callback',{@RemoveMeanButton});
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontAngle','italic',...
		'FontSize',8,...
		'HorizontalAlignment','left',...
		'String','Remove mean intensity from time trace / Show all intensity data.',...
		'Position',[x2 y1 tw eh]);
	
	% Peaks Edges Height
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontAngle','italic',...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String','Height:',...
		'Position',[x1 y2 lw th]);
	uicontrol(...
		'Parent',hObject,...
		'Style','edit',...
		'Tag','tft_label_peaksHeight',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'String','0.2',...
		'Position',[x1+lw+3 y2 ew eh],...
		'Callback',{@AdjustImage});
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontAngle','italic',...
		'FontSize',8,...
		'HorizontalAlignment','left',...
		'String','Set the "Peak Edges" relative height (in % of total intensity interval).',...
		'Position',[x2 y2 tw 1*eh]);
	
	% Trace trough frames button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Trace Features',...
		'TooltipString','Mark the features to trace in the new figure window by pressing left mouse button. When done press enter. To delete the last press backspace or delete',...
		'Position',[x1 y3 bw bh],...
		'Callback',{@TraceFeaturesButton});
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontAngle','italic',...
		'FontSize',8,...
		'HorizontalAlignment','left',...
		'String','Select features to be traced through the selected number of frames.',...
		'TooltipString','Mark the features to trace in the new figure window',...
		'Position',[x2 y3 tw eh]);
	
	% Track valleys instead of peaks
	uicontrol(...
		'Parent',hObject,...
		'Style','checkbox',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'String','Track valleys instead of peaks',...
		'Value',false,...
		'TooltipString','Check to track valleys instead of peaks.',...
		'Position',[x1 y4 tw+tw eh],...
		'Tag','att_ckbx_trackValleys',...
		'Callback',{@AdjustImage, 'gaussian'},...
		'Enable','on');
	 
	% Show Feature Trace
	uicontrol(...
		'Parent',hObject,...
		'Style','checkbox',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'String','Show Traced Features in Time Trace Display',...
		'Value',true,...
		'TooltipString','Toggles Traced Features lines on/off in Time Trace Display.',...
		'Position',[x1 y5 tw+tw eh],...
		'Tag','att_ckbx_showTraceFeatures',...
		'Callback',{@AdjustImage,'gaussian'},...
		'Enable','on');
	
end
function uiFilterPanel(hObject,eventdata,varargin)
	
	% Dimensions
	pos = get(hObject,'Position');
	
	w = pos(3); h = pos(4);
	
	bw = 40; bh = 20;
	
	tw = 90; th = 20;
	
	ew = 50; eh = 23;
	
	x1 = 10;
	x2 = x1 + tw;
	x3 = x2 + ew + 10;
	x4 = x3 + ew + 10;
	x5 = x4 + ew + 10;
	
	y1 = h - (20 + th);
	y2 = y1 - th - 5;
	y3 = y2 - th - 5;
	y4 = y3 - th - 5;
	
	% Titles
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'String','(1)',...
		'Position',[x2 y1 ew th]);
	
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'String','(2)',...
		'Position',[x3 y1 ew th]);
	
	% Gaussian
	uicontrol(...
		'Parent',hObject,...
		'Style','checkbox',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'String','Gaussian',...
		'TooltipString','Symmetric Gaussian lowpass filter of size (1), and standard deviation (2)',...
		'Position',[x1 y2 tw eh],...
		'Tag','att_filt_gauss_0',...
		'Callback',{@AdjustImage,'gaussian'},...
		'Enable','on');
	uicontrol(...	% Size
		'Parent',hObject,...
		'Style','edit',...
		'Tag','att_filt_gauss_1',...
		'TooltipString','Symmetric Gaussian lowpass filter of size (1), and standard deviation (2)',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'Callback',{@AdjustImage,'gaussian'},...
		'String','5',...
		'Position',[x2 y2 ew eh]);
	uicontrol(...	% Width
		'Parent',hObject,...
		'Style','edit',...
		'Tag','att_filt_gauss_2',...
		'TooltipString','Symmetric Gaussian lowpass filter of size (1), and standard deviation (2)',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'Callback',{@AdjustImage,'gaussian'},...
		'String','2',...
		'Position',[x3 y2 ew eh]);
	uicontrol(...	% Note
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',8,...
		'HorizontalAlignment','left',...
		'String','Symmetric Gaussian lowpass filter of size (1), and standard deviation (2)',...
		'Position',[x4 y2 w-(x4+5) eh]);
	
	% Average
	uicontrol(...
		'Parent',hObject,...
		'Style','checkbox',...
		'TooltipString','Averageing filter of width (1)',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'String','Average',...
		'Position',[x1 y3 tw eh],...
		'Callback',{@AdjustImage,'average'},...
		'Tag','att_filt_avr_0',...
		'Enable','on');
	uicontrol(...	% Size
		'Parent',hObject,...
		'Style','edit',...
		'TooltipString','Averageing filter of width (1)',...
		'Tag','att_filt_avr_1',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'Callback',{@AdjustImage,'average'},...
		'FontSize',10,...
		'String','8',...
		'Position',[x2 y3 ew eh]);
	uicontrol(...	% Note
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',8,...
		'HorizontalAlignment','left',...
		'String','Averageing filter of height (1)',...
		'Position',[x4 y3 w-(x4+5) eh]);
	
	% Sgo-Lay
	uicontrol(...
		'Parent',hObject,...
		'Style','checkbox',...
		'TooltipString','Savitzky-Golay FIR filter of length (1), and order (2) < (1)',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'String','Sgo-Lay',...
		'Position',[x1 y4 tw eh],...
		'Callback',{@AdjustImage,'sgo-lay'},...
		'Tag','att_filt_sgolay_0',...
		'Enable','on');
	uicontrol(...	% Length
		'Parent',hObject,...
		'Tag','att_filt_sgolay_1',...
		'TooltipString','Savitzky-Golay FIR filter of length (1), and order (2) < (1)',...
		'Style','edit',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'Callback',{@AdjustImage,'sgo-lay'},...
		'FontSize',10,...
		'String','10',...
		'Position',[x2 y4 ew eh]);
	uicontrol(...	% Order
		'Parent',hObject,...
		'Style','edit',...
		'TooltipString','Savitzky-Golay FIR filter of length (1), and order (2) < (1)',...
		'Tag','att_filt_sgolay_2',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'Callback',{@AdjustImage,'sgo-lay'},...
		'FontSize',10,...
		'String','5',...
		'Position',[x3 y4 ew eh]);
	uicontrol(...	% Note
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',8,...
		'HorizontalAlignment','left',...
		'String','Savitzky-Golay FIR filter of length (1), and order (2) < (1)',...
		'Position',[x4 y4 w-(x4+5) eh]);
	
end
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Button callback functions %
% ========================= %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function CloseButton(hObject,handles,varargin)
	
	close(findobj('Tag','hTFT'));
	
end
function LoadButton(hObject,handles,varargin)
	
	LoadData(1);
	
end
function SaveTIFButton(hObject,handles,varargin)


    % Load data struct
    data = guidata(findobj('Tag','hSMAT'));
    current = data.tft.original;
    
    % Get save path and name
    [saveFileName,savePathName,saveFilterIndex] = uiputfile(...
        {'*.tif'},...
        'Save aligned time trace...',...
        ['Aligned_',strtok(data.tft.filename,'.')]);
    if ( saveFileName == 0 )
        disp('No file name selected... save failed!')
        return
    end
    
	% Write to tiff file
	imwrite(...
		uint16(current),...
		[ savePathName, strtok(saveFileName,'.') '.tif'],...
		'WriteMode','overwrite');
    
end
function SaveCSVButton(hObject,handles,varargin)

	LoadData(1);
	
end
function RevertButton(hObject,handles,varargin)
	
	% Disable the Back button
	set(findobj('String','Step Back'),'Enable','off');
	
	% Reset data struct
	data = guidata(findobj('Tag','hSMAT'));
	LoadData(data.tft.originalBackup, 2, 3)
	
end
function BackButton(hObject,handles,varargin)

	%Disable the Back button
	set(findobj('String','Step Back'),'Enable','off');

	%Enable the Align button
	set(findobj('String','Align'),'Enable','on');

	% Reset timetrace data 1 step
	data = guidata(findobj('Tag','hSMAT'));
	%LoadData(data.tft.originalOld, 2, 3)
	data.tft.original = data.tft.originalOld;
	guidata(findobj('Tag','hSMAT'),data);
	 
	% Update
	UpdateAxes;
	AdjustImage;
	 
end
function AlignButton(hObject,handles,varargin)

	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	original = data.tft.original;
	intLim = data.tft.intLim;
	fNr = data.tft.fNr;
	fNrSel = data.tft.fNrSel;
	nFeatures = data.tft.nFeatures;
	stretchFeatures = data.tft.stretchFeatures;
	molL = data.tft.molL;

	%Enable the Back button
	set(findobj('String','Step Back'),'Enable','on');

	%Enable the Revert button
	set(findobj('String','Revert'),'Enable','on');

	%Disable the Align button
	set(findobj('String','Align'),'Enable','off');

	% Calc. Variables
	fInt = max(fNrSel) - min(fNrSel);
	f1 = min(fNrSel);
	f2 = max(fNrSel);

	stretched = zeros(size(original));

	%Find the mean x value for each feature
	meanXFeature = mean(stretchFeatures);

	for i = 1:fInt+1
	 
		% Calc current frame
		 f = f1+i-1;
	 
		%Get the original frame
		 originalFrame = original(f, :);
		 frame = original(f, :);
	 
		%nFeat = length(stretchFeatures(f,:));
		
		for j = 1:nFeatures
			fluctFeature = round(meanXFeature(j)-stretchFeatures(f, j));
			
			%Align leftmost feature
			if (j == 1)
				
				if (fluctFeature > 0)
				
					frame = [ones(1, fluctFeature)*min(frame) frame];
					frame = frame(1:meanXFeature(j));
				
				elseif (fluctFeature < 0)
				
					frame(1:abs(fluctFeature))=[];
					frame = frame(1:meanXFeature(j));
				
				else
					
					frame = frame(1:meanXFeature(j));
					
				end
				
			else	% If it is NOT the first feature in the frame
				
				bitLength = meanXFeature(j)-meanXFeature(j-1);
				frameBit = originalFrame(stretchFeatures(f, j-1):stretchFeatures(f, j));
				frameBitRS = imresize(frameBit, [1 bitLength]);
				frame = [frame frameBitRS];
			
			end
			
		end
		
		%Check the length of the frame compared to original
		lDiff = round(length(frame)-molL);
		
		%Find position of last feature
		lastFeatPos = round(stretchFeatures(f, nFeatures));
		
		%Calc how much fresh new material there is to work with
		originalLeft = round(molL-lastFeatPos);
		
		if (lDiff < 0)
			
			if (abs(lDiff) < originalLeft)
				
% 				disp('lDiff<0')
				frame = [frame originalFrame(lastFeatPos+1:lastFeatPos+abs(lDiff))];
				
			else
				
				lDiff2 = abs(lDiff)-originalLeft;
% 				disp('lDiff>0')
				frame = [frame originalFrame(lastFeatPos+1:molL) ones(1, lDiff2)*min(frame)];
				
			end
			
		elseif (lDiff > 0)
			
			frame(molL-lDiff:molL) = [];
			
		end
		
% 		size(frame)
% 		size(stretched(f, :))
		
		% Store in stretched image
		stretched(f, :) = frame;
		
	end
	
	%Store GUI data
	data.tft.stretched = stretched;
	data.tft.current = stretched;
	data.tft.originalOld = original;
	data.tft.original = stretched;
	guidata(findobj('Tag','hSMAT'),data);

	%Update
	UpdateAxes;
	AdjustImage;

end
function TraceFeaturesButton(hObject,eventdata,varargin)
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	current = data.tft.current;
	intLim = data.tft.intLim;
	fNr = data.tft.fNr;
	fNrSel = data.tft.fNrSel;
	traceFeatures = data.tft.traceFeatures;
	molL = data.tft.molL;

	% Enable the Back button
	set(findobj('String','Align'),'Enable','on');

	% Get data from figure for feature initialization
	ptsfig = figure();
	imagesc(flipud(current));
	[startX, startY] = getpts(ptsfig);
	nFeatures = length(startX);
	close(ptsfig);

	% Calc. Variables
	fInt = max(fNrSel) - min(fNrSel);
	f1 = min(fNrSel);
	f2 = max(fNrSel);

	%Starting points for feature tracking from manual marking.
	featureStart = startX';

	% Get label data
	height = str2num(get(findobj('Tag','tft_label_peaksHeight'),'String'));
	height = height/100 * (intLim(2)-intLim(1)); % Relative total intensity interval

	%Reset traceFeatures
	traceFeatures = 0.*traceFeatures;

	% All frames in intervall
	for i = 1:fInt+1
		
		% Calc current frame
		f = f1+i-1;
		
		% get extended maximas/minimas
		if (get(findobj('Tag','att_ckbx_trackValleys'),'Value'))
			
			allFeat{i} = find(imextendedmin(current(f,:), height));
			
		else
			
			allFeat{i} = find(imextendedmax(current(f,:), height));
			
		end
		
		currentL = length(allFeat{i});
		
		% Get distance matrix
		distM = ...
			cumsum([featureStart' zeros(nFeatures,currentL-1)],2) - ...
			cumsum([allFeat{i} ; zeros(nFeatures-1,currentL)],1);
		
		% Get min distances
		[minDist minDistPos] = min(abs(distM),[],2);
		
		% Set corrected distance
		for j = 1:nFeatures
			
			traceFeatures(f,j) = featureStart(j) - distM(j,minDistPos(j));
			
			%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
			% Check so it doesnt jump to far sideways, go to last frame val.
			if (f > 1 && abs(traceFeatures(f,j)-traceFeatures(f-1,j)) > 6)
				
				traceFeatures(f,j) = traceFeatures(f-1,j);
				
			end
			%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
			
		end
		
		% Store the features that will be used for stretching the timetrace
		stretchFeatures(f, :) = nonzeros(traceFeatures(f, :))';
		
		% Update the startingpoints to last frames features
		featureStart = nonzeros(traceFeatures(f, :))';
		
		% Store all GUI data
		data.tft.stretchFeatures = stretchFeatures;
		data.tft.traceFeatures = traceFeatures;
		data.tft.nFeatures = nFeatures;
		guidata(findobj('Tag','hSMAT'),data);
		
		% Update
		UpdateAxes;
		
	end
	
end
function RemoveMeanButton(hObject,eventdata,varargin)
	
	labelName = {...
		'Remove Mean';...
		'Show All'};
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));

	% Toggle Mean on/off
	switch get(hObject,'String')
		
		case labelName{1}
			
			data.tft.removeMean = true;
			set(hObject,'String',labelName{2});
			
		case labelName{2}
			
			data.tft.removeMean = false;
			set(hObject,'String',labelName{1});
			
	end
	
	% Store all GUI data
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update
	AdjustImage;
	
end


%%%%%%%%%%%%%%%%%%%%%%
% Callback functions %
% ================== %
%%%%%%%%%%%%%%%%%%%%%%
function FrameSelectionChange1(pos)
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
	% Calc int pos
	y = round(pos(2));
	
	% Store all GUI data
	data.tft.fNrSel(1) = y;
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update Axes
	UpdateAxes;
	
end
function FrameSelectionChange2(pos)
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
	% Calc int pos
	y = round(pos(2));
	
	% Store all GUI data
	data.tft.fNrSel(2) = y;
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update Axes
	UpdateAxes;
	
end
function FrameSelectionChange3(pos)
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
	% Calc int pos
	y = round(pos(2));
	
	% Store all GUI data
	data.tft.fNr = y;
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update Axes
	UpdateAxes;
	
end
function IntensityThresholdChange(pos)
	
	% Get and rename position of selection
	x = pos(1); y = pos(2);
	y = round(y*100)*.01;

	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
	% Write data
	data.tft.relIntTh = y;
	
	% Store all GUI data
	guidata(findobj('Tag','hSMAT'),data);

	% Update images
	AdjustImage;
	
	
end
function AdjustImage(hObject,eventdata,varargin)
	
	filterNames = {...
		'gaussian';...
		'average';...
		'sgo-lay'};
	filterTypes = {...
		'att_filt_gauss_0';...
		'att_filt_avr_0';...
		'att_filt_sgolay_0'};
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	original = data.tft.original;
	current = original;
	removeMean = data.tft.removeMean;
	nFrames = data.tft.nFrames;
	intLim = data.tft.intLim;
	
	% Add filters
	for i = 1 : length(filterNames)
		
		if (get(findobj('Tag',filterTypes{i}),'Value'))
			
			switch filterTypes{i}
			
			case 'att_filt_gauss_0'
				
				% Get paramters
				p(1) = str2num(get(findobj('Tag','att_filt_gauss_1'),'String'));
				p(2) = str2num(get(findobj('Tag','att_filt_gauss_2'),'String'));
				
				% Design filter
				x = (1:p(1))-(1+p(1)/2);
				b = exp( -(x.^2)./(2.*p(2).^2) );
				b = b ./ sum(b);
				
				% Set filter
				current = filtfilt(b,1,current')';
			
			case 'att_filt_avr_0'

				% Get paramters
				p(1) = str2num(get(findobj('Tag','att_filt_avr_1'),'String'));
				
				% Design filter
				b = ones(1,p(1))/p(1);
				
				% Set filter
				current = filtfilt(b,1,current);
				
				% Fix ends so that they are also affected
				for i = 1:1:ceil(p(1)/2)
					
					current(i, :) = current(ceil(p(1)/2)+1, :);
					
				end
				for i = nFrames:-1:nFrames-ceil(p(1)/2)
					
					current(i, :) = current(nFrames-ceil(p(1)/2)-1, :);
					
				end
				
			case 'att_filt_sgolay_0'
				
				% Get parameters
				p(1) = str2num(get(findobj('Tag','att_filt_sgolay_1'),'String'));
				p(2) = str2num(get(findobj('Tag','att_filt_sgolay_2'),'String'));
				
				% Adjust parameters to allowed values
				if (p(1) <= p(2) )
					p(1) = p(2) + 1;
				end
				if ( mod(p(1),2)==0)
					p(1) = p(1) + 1;
				end
				
				% Filter
				current = sgolayfilt(current',p(2),p(1))';

			end
			
		end
		
	end
	
	% Remove mean
	if removeMean
		
		currentMean = mean(current,1);
		bias = (intLim(2) + intLim(1))/2;
		
		for i = 1:nFrames
			
			current(i,:) = bias + current(i,:) - currentMean;
			
		end
	
	end
	
	% Get peaks region and data intervall
	dataMin = intLim(1);
	dataMax = intLim(2);
	dataInterval = dataMax - dataMin;
	intTH = (data.tft.relIntTh) * dataInterval + dataMin;
	
	% Suppress data outside intensity threshold.
	selectedSignal = ...
		(current < intTH) .* dataMin + ...
		(current > intTH) .* current;
	
	% Store all GUI data
	data.tft.current = selectedSignal;
	guidata(findobj('Tag','hSMAT'),data);

	% Find features
	FindFeatures;
	
	% Update all axes
	UpdateAxes;
	
end
	
%%%%%%%%%%%%%%%%%%%
% Other functions %
% =============== %
%%%%%%%%%%%%%%%%%%%
function FindFeatures(hObject,eventdata,varargin)
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	current = data.tft.current;
	intLim = data.tft.intLim;
	fNr = data.tft.fNr;
	
	% Get label data
	height = str2num(get(findobj('Tag','tft_label_peaksHeight'),'String'));
	height = height/100 * (intLim(2)-intLim(1)); % Relative total intensity interval
	
	% Calc. min/max
	peakFeatures = find(imextendedmax(current(fNr,:), height));
	sinkFeatures = find(imextendedmin(current(fNr,:), height));
	peakSizeEdge = find(edge(single(imextendedmax(current(fNr,:),height)),'sobel',0));
	
	% Store all GUI data
	data.tft.peakFeatures = peakFeatures;
	data.tft.sinkFeatures = sinkFeatures;
	data.tft.peakSizeEdge = peakSizeEdge;
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update
	UpdateAxes;
	
end
function UpdateSelectionTools(varargin)
	
	% Load data structure
	data = guidata(findobj('Tag','hSMAT'));
	hSelTool = data.tft.hSelTool;
	nFrames = data.tft.nFrames;

	% Update constrain functions
	hConFcn = makeConstrainToRectFcn('impoint',[0 0].*.5,[1 nFrames]);
	
	setPositionConstraintFcn(hSelTool(1),hConFcn);
	setPositionConstraintFcn(hSelTool(2),hConFcn);
	setPositionConstraintFcn(hSelTool(3),hConFcn);
	
	% Update positions
	setPosition(hSelTool(1),[0 1]);
	setPosition(hSelTool(2),[0 nFrames]);
	setPosition(hSelTool(3),[0 1]);
	
end
function SetAxes(varargin)
	
	% Load data structure
	data = guidata(findobj('Tag','hSMAT'));
	molL = data.tft.molL;
	intLim = data.tft.intLim;
	nFrames = data.tft.nFrames;
	
	% Trace Axes
	axis(get(findobj('Tag','tft_imgsc_trace'),'Parent'),...
		'xy','tight');

	% Frame number selection tools axes
	set(findobj('Tag','tft_axes_fNrSel'),...
		'XLim',[-1 1],...
		'YLim',[1 nFrames]);
	
	% Current frame number selection tools axes
	set(findobj('Tag','tft_axes_fNr'),...
		'XLim',[-1 1],...
		'YLim',[1 nFrames]);
	
	% Mean Intensity Axes
	axis(findobj('Tag','tft_axes_meanInt'),[1 molL intLim]);
	
	% Current Frame Axes
	set(findobj('Tag','tft_legend_currentFrame'),...
		'Location','SouthOutside');
	axis(findobj('Tag','tft_axes_currentFrame'),[1 molL intLim]);
	
end
function UpdateAxes(varargin)

	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	current = data.tft.current;
	molL = data.tft.molL;
	intLim = data.tft.intLim;
	fNr = data.tft.fNr;
	fNrSel = data.tft.fNrSel;
	hFeatures = data.tft.hFeatures;
	peakFeatures = data.tft.peakFeatures;
	sinkFeatures = data.tft.sinkFeatures;
	peakSizeEdge = data.tft.peakSizeEdge;
	traceFeatures = data.tft.traceFeatures;
	
	% Get data
	nFeatures = data.tft.nFeatures;

	% Current image
	set(findobj('Tag','tft_imgsc_trace'),...
		'CData',current);
	
	% Current frame line
	set(findobj('Tag','tft_line_fNr'),...
		'XData',[1 molL],...
		'YData',fNr.*[1 1]);
	
	% Frame selection lines
	set(findobj('Tag','tft_line_fNr1'),...
		'XData',[1 molL],...
		'YData',fNrSel(1).*[1 1]);
	set(findobj('Tag','tft_line_fNr2'),...
		'XData',[1 molL],...
		'YData',fNrSel(2).*[1 1]);
	
	% Feature lines
	f1 = min(fNrSel);
	f2 = max(fNrSel);
	for i = 1:nFeatures
		set(hFeatures(i),...
			'XData',traceFeatures(f1:f2,i),...
			'YData',f1:f2);
	end
	if get(findobj('Tag','att_ckbx_showTraceFeatures'),'Value')
		set(hFeatures,'Visible','on');
	else
		set(hFeatures,'Visible','off');
	end
	
	% Calc mean and std intensity
	f1 = min(fNrSel);
	f2 = max(fNrSel);
	meanInt = mean(current(f1:f2,:),1);
	stdInt = std(current(f1:f2,:),1);
	
	% Mean intensity lines
	set(findobj('Tag','tft_line_meanInt'),...
		'XData',1:molL,...
		'YData',meanInt);
	set(findobj('Tag','tft_line_std1'),...
		'XData',1:molL,...
		'YData',meanInt+stdInt);
	set(findobj('Tag','tft_line_std2'),...
		'XData',1:molL,...
		'YData',meanInt-stdInt);
	
	% Current Frame Lines
	set(findobj('Tag','tft_line_currentInt'),...
		'XData',1:molL,...
		'YData',current(fNr,:));

	if (get(findobj('Tag','att_ckbx_showPeaks'),'Value'))
		
		set(findobj('Tag','tft_line_peakFeatureMarker'),...
			'XData',peakFeatures,...
			'YData',current(fNr,round(peakFeatures)));
			
	else
		
		set(findobj('Tag','tft_line_peakFeatureMarker'),...
		'XData',[0 0],...
		'YData',[0 0]);
		
	end
	
	if (get(findobj('Tag','att_ckbx_showValleys'),'Value'))
		
		set(findobj('Tag','tft_line_sinkFeatureMarker'),...
			'XData',sinkFeatures,...
			'YData',current(fNr,round(sinkFeatures)));
	
	else
		
		set(findobj('Tag','tft_line_sinkFeatureMarker'),...
			'XData',[0 0],...
			'YData',[0 0]);
		
	end
	
	if (get(findobj('Tag','att_ckbx_showEdges'),'Value'))
		
		set(findobj('Tag','tft_line_peakSize'),...
			'XData',peakSizeEdge,...
			'YData',current(fNr,round(peakSizeEdge)));
		
	else
		
		set(findobj('Tag','tft_line_peakSize'),...
			'XData',[0 0],...
			'YData',[0 0]);
		
	end
	
	set(findobj('Tag','tft_legend_currentFrame'),...
		'Location','SouthOutside');
	title(findobj('Tag','tft_axes_currentFrame'),...
		sprintf('  Current Frame (%g)	 ',fNr));
		
	drawnow;
	
end
function LoadData(varargin)
	
	% Select load type
	if (nargin == 3)
		
		original = varargin{1};
%		x0 = varargin{2};
%		Lx = varargin{3};

	else
		
		% Get filename and path with "uigetfile"
		[filename, pathname] = uigetfile('*.tif', 'select data file');
		if ( filename == 0 )
			disp('Error! No (or wrong) file selected!')
			filename = 0;
			pathname = 0;
		end
		full_filename = [ pathname, filename ];
		
		original = double(imread([pathname,strtok(filename,'.'),'.tif'],1));
%		load([pathname,strtok(filename,'.'),'.mat'],'x0','Lx');
		
	end
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
	
	% Calc. new variables
	intLim = [min(min(original)) max(max(original))];
	molL = size(original,2);
	nFrames = size(original,1);
	fNrSel = [1 nFrames];
	fNr = 1;
	nFeatures = data.tft.nFeatures;
	traceFeatures = zeros(nFrames,nFeatures);
	stretchFeatures = zeros(nFrames,nFeatures);
	peakFeatures = ones(1,5);
	
	% Store all GUI data
	data.tft.filename = filename;
    data.tft.intLim = intLim;
	data.tft.molL = molL;
	data.tft.nFrames = nFrames;
	data.tft.fNr = fNr;
	data.tft.fNrSel = fNrSel;
	data.tft.original = original;
	data.tft.originalOld = original;
	data.tft.originalBackup = original;
	data.tft.current = original;
	data.tf.stretched = original;
%	data.tft.x0 = x0;
%	data.tft.Lx = Lx;
	data.tft.peakFeatures = peakFeatures;
	data.tft.traceFeatures = traceFeatures;
	data.tft.stretchFeatures = stretchFeatures;
	data.tft.nFeatures = nFeatures;
	
	guidata(findobj('Tag','hSMAT'),data);
	
	% Set Axes to new data and update
	UpdateSelectionTools;
	UpdateAxes;
	SetAxes;
	AdjustImage;
	
end


