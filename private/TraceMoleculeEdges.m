%%%%%%%%%%%%%%%%%%
% Main functions %
% ============== %
%%%%%%%%%%%%%%%%%%
function TraceMoleculeEdges(hObject,varargin)
	
	% Create main figure
	hFig = figure(...
	  	'Units','pixels',...
		'Tag','hTME',...
		'MenuBar','none',...
		'Toolbar','none',...
		'NumberTitle','off',...
		'Visible','off',...
		'Position',[0 0 1 1],...
		'Resize','off',...
		'Colormap',hot);
	drawTraceMoleculeEdgesContent(hFig);
	
	% Load Data to GUI
	LoadTIFButton;
	
	% Move and make visible
	movegui(hFig,'north')
	set(hFig,'Visible','on');
	
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Draw GUI content functions %
% ========================== %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function drawTraceMoleculeEdgesContent(hObject,varargin)
	
	% Delete previous content
	delete(get(hObject,'Children'));
	
	% Set name of window
	set(hObject,'Name','SMATool - Trace Molecule Edges (TME)');
	
	% Dimenions
	plw = 20 + 310 + 20; prw = 450;
	
	bw = 90; bh = 25;
	
	sh = 30;
	
	th = 20;
	
	brh = 47;
	
	w1 = 20 + 310 + 20;
	w2 = 400;
	
	brh = 47;
	
	dataDispH = 20 + 330 + 20 + 20 + 150 + 20;
	
	dataInfoH = 20 + 6*(th + 5) + 5;
	traceSetH = 20 + 8*(th + 5) + 5;
	filtH = 20 + 4*(th + 5) + 5;
	
	lH = brh + 10 + dataDispH + 20;
	rH = brh + 10 + filtH + 10 + traceSetH + 10 + dataInfoH + 20;
	
	h = max(rH,lH);
	w = 20 + plw + 20 + prw + 20;
	
	if (rH > lH)
		dataDispH = dataDispH + (rH-lH);
	elseif (rH < lH)
		dataInfoH = dataInfoH + (lH-rH);
	end
	
	yr1 = h - (20 + dataInfoH);
	yr2 = yr1 - (10 + traceSetH);
	yr3 = yr2 - (10 + filtH);
	
	yl1 = h - (20 + dataDispH);
	
	x1 = 20;
	x2 = x1 + plw + 20;

	set(hObject,'Position',[0 0 w h]);
	
	% Panels
	hButtonPanel = uibuttongroup(...
		'Parent',hObject,...
		'Tag','tme_panel_buttonRow',...
		'Units','pixels',...
		'BackgroundColor',get(hObject,'Color'),...
		'visible','on',...
		'BorderType','none',...
		'Position',[0 0 w brh]);
	uiButtonPanel(hButtonPanel)
	
	hDataPanel = uibuttongroup(...
		'Parent',hObject,...
		'Units','pixels',...
		'Title','Data Display',...
		'BackgroundColor',get(hObject,'Color'),...
		'FontSize',10,...
		'Position',[x1 yl1 plw dataDispH],...
		'Tag','DataPanel');
	uiDataPanel(hDataPanel);
	
	hInfoPanel = uibuttongroup(...
		'Parent',hObject,...
		'Units','pixels',...
		'Title','File Info.',...
		'BackgroundColor',get(hObject,'Color'),...
		'FontSize',10,...
		'Position',[x2 yr1 prw dataInfoH],...
		'Tag','InfoPanel');
	uiDataInfoPanel(hInfoPanel);
	
	hTraceSetPanel = uibuttongroup(...
		'Parent',hObject,...
		'Units','pixels',...
		'Title','Trace Molecule Settings',...
		'BackgroundColor',get(hObject,'Color'),...
		'FontSize',10,...
		'Position',[x2 yr2 prw traceSetH],...
		'Tag','tme_panel_traceMolecule');
	uiTraceSettingsPanel(hTraceSetPanel);
	
	hFilterPanel = uibuttongroup(...
		'Parent',hObject,...
		'Units','pixels',...
		'Title','Data Filtering',...
		'BackgroundColor',get(hObject,'Color'),...
		'FontSize',10,...
		'Position',[x2 yr3 prw filtH],...
		'Tag','tme_panel_filtering');
	uiFilterPanel(hFilterPanel);
		
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Panel construction functions %
% ============================ %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function uiButtonPanel(hObject,eventdata,varargin)
	
	% Dimensions
	pos = get(hObject,'Position');
	
	w = pos(3); h = pos(4);
	
	bw = 90; bh = 25;
	
	tw = 70;
	
	% Save Edges Button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'TooltipString','Save edge data in a CSV file.',...
		'String', 'Save Edges',...
		'Position',[20 10 bw bh],...
		'Callback', {@SaveButton},...
		'Enable','on');
	
	% Length and drift distributions of time trace
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Show Distributions',...
		'Position',[20+bw 10 2*bw bh],...
		'Callback',{@DistributionsButton});
    
    	% Align Timetrace Button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String', '? = 42',...
		'Position',[3*bw+20 10 bw bh],...
		'Callback', {@AlignTTButton},...
		'Visible','on',...
		'Enable','on');
	
	% Close
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Close',...
		'Position',[w-(bw+20) 10 bw bh],...
		'Callback',{@CloseButton});
	
	% Load TIF
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'TooltipString','Load new file.',...
		'String','Load new TIF',...
		'Position',[w-(3*bw+20) 10 2*bw bh],...
		'Callback',{@LoadTIFButton});
    
    % Run batch
uicontrol(...
    'Parent',hObject,...
    'Units','pixels',...
    'Style','pushbutton',...
    'TooltipString','Runs through a batch of files.',...
    'String','Run batch',...
    'Position',[w-(5*bw+20) 10 bw bh],...
    'Callback',{@BatchButton});
		
end
function uiDataPanel(hObject,eventdata,varargin)
	
	% Dimensions
	pos = get(hObject,'Position');
	
	w = pos(3);
	h = pos(4);
	
	bw = 80;
	bh = 27;
	
	th = 20;
	
	ew = 40;
	eh = 23;
	
	w1 = 300;
	h1 = 300;
	h2 = 150;
	
	x1 = 20;
	x2 = x1 + bw;
	x3 = x2 + bw + 10;
	x4 = x3 + bw;
	
	y1 = h - (20 + h1);
	y2 = 20;
	
	% Load data structure
	data = guidata(findobj('Tag','hSMAT'));
	
	% Time Trace Axes
	ax1 = axes(...
		'Parent',hObject,...
		'Units','pixels',...
		'Position',[x1 y1 w1 h1],...
		'Visible','on');
	current = ones(4);
	traceMap = current;
	moleculeCenter = zeros(1,4);
	imagesc(...
		current,...
		'Parent',ax1,...
		'Tag','att_imgsc_TT',...
		'Visible','off');
	line(...
		'Parent',ax1,...
		'XData',[0 0],...
		'YData',[0 0],...
		'Color','m',...
		'LineWidth',1,...
		'Visible','on',...
		'Tag','att_hCenterTrace')
	line(...
		'Parent',ax1,...
		'XData',[0 0],...
		'YData',[0 0],...
		'Color','b',...
		'Tag','att_line_frameNr')
	l1 = legend(ax1,...
		'Center o Molecule','Current frame');
	set(l1,...
		'Location','NorthEast',...
		'Box','off',...
		'Color','none',...
		'TextColor',[1 1 1]);
	axis(ax1,'off','tight');
	
	% Scrollbar
	uicontrol(...
		'Parent',hObject,...
		'Tag','att_tt_scrollbar',...
		'Style','slider',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Value',0,...
	   'Position',[x1+w1 y1 10 300],...
		'Callback',{@ScrollFrame},...
		'Enable','off');
	
	% Frame number label
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',12,...
		'HorizontalAlignment','center',...
		'String','Frame number -',...
	   'Position',[x1 y2+h2+5 w1 th],...
		'Tag','att_label_frameNr');
	
	% Current Frame Axes
	chL = 200;
	intLim = [1 chL 0 1];
	searchLim = round(chL.*[.25 .75]);
	pulseStart = round(chL.*[.375 .625]);
	ax2 = axes(...
		'Parent',hObject,...
		'Units','pixels',...
		'Position',[x1 y2 w1 h2],...
		'Tag','att_ax_currentFrame',...
		'Visible','on');
	axis(ax2,'off',intLim);
	
	% Intensity
	x = 1:intLim(2);
	line(...
		'Parent',ax2,...
		'XData',50:150-1,...
		'YData',.5*ones(1,100),...
		'Color',[.5 .5 .5],...
		'LineWidth',1,...
		'LineStyle','--',...
		'Tag','att_line_current_1');
	line(...
		'Parent',ax2,...
		'XData',x,...
		'YData',.5.*ones(size(x)),...
		'Color','k',...
		'LineWidth',1,...
		'Tag','att_line_current_2');
	% Pulse models
	line(...
		'Parent',ax2,...
		'XData',50:150-1,...
		'YData',.5.*ones(1,100),...
		'Color','g',...
		'LineWidth',2,...
		'Tag','att_line_pulse_1');
	line(...
		'Parent',ax2,...
		'XData',x,...
		'YData',.5.*ones(size(x)),...
		'Color','m',...
		'Visible','on',...
		'LineWidth',2,...
		'Tag','att_line_pulse_2');
	% Selection tool marker lines
	line(...
		'Parent',ax2,...
		'XData',searchLim(1).*[1 1],...
		'YData',intLim(3:4),...
		'Color','k',...
		'LineWidth',1,...
		'LineStyle',':',...
		'Tag','att_line_selMark_1');
	line(...
		'Parent',ax2,...
		'XData',searchLim(2).*[1 1],...
		'YData',intLim(3:4),...
		'Color','k',...
		'LineWidth',1,...
		'LineStyle',':',...
		'Tag','att_line_selMark_2');
	line(...
		'Parent',ax2,...
		'XData',pulseStart(1).*[1 1],...
		'YData',intLim(3:4),...
		'Color','r',...
		'LineWidth',1,...
		'LineStyle','--',...
		'Tag','att_line_selMark_3');
	line(...
		'Parent',ax2,...
		'XData',pulseStart(2).*[1 1],...
		'YData',intLim(3:4),...
		'Color','r',...
		'LineWidth',1,...
		'LineStyle','--',...
		'Tag','att_line_selMark_4');
	
	% Initialize interactive points
	pulsePos = [pulseStart(1) .5 pulseStart(2) .5];
	hEP1 = impoint(ax2,pulsePos(1:2));
	hEP2 = impoint(ax2,pulsePos(3:4));
	setColor(hEP1,'r');
	setColor(hEP2,'r');
	searchPos = [searchLim(1) .5 searchLim(2) .5];
	hSP1 = impoint(ax2,searchPos(1:2));
	hSP2 = impoint(ax2,searchPos(3:4));
	setColor(hSP1,'k');
	setColor(hSP2,'k');
	
	% Bound points to within axes
	fcn = makeConstrainToRectFcn('impoint',[1 chL],.5.*[1 1]);
	setPositionConstraintFcn(hEP1,fcn);
	setPositionConstraintFcn(hEP2,fcn);
	fcn = makeConstrainToRectFcn('impoint',[1 pulseStart(1)],.5.*[1 1]);
	setPositionConstraintFcn(hSP1,fcn);
	fcn = makeConstrainToRectFcn('impoint',[pulseStart(2) chL],.5.*[1 1]);
	setPositionConstraintFcn(hSP2,fcn);
	
	% Add callback to points
	addNewPositionCallback(hEP1,@Point1Move);
	addNewPositionCallback(hEP2,@Point2Move);
	addNewPositionCallback(hSP1,@SearchPoint1Move);
	addNewPositionCallback(hSP2,@SearchPoint2Move);
	
	% Store all GUI data
	data.tme.selTools = [hEP1 hEP2 hSP1 hSP2];
	data.tme.intLim = intLim;
	data.tme.searchLim = searchLim;
	data.tme.pulseStart = pulseStart;
	data.tme.currentTT = current;
	data.tme.traceMap = traceMap;
	data.tme.moleculeCenter = moleculeCenter;
	data.tme.moleculeLength = moleculeCenter;
	data.tme.fNr = 1;
	data.tme.searchPos = searchPos;
	data.tme.pulsePos = pulsePos;
	guidata(findobj('Tag','hSMAT'),data);
	
end
function uiDataInfoPanel(hObject,eventdata,varargin)
	
	% Dimensions
	pos = get(hObject,'Position');
	
	w = pos(3);
	h = pos(4);
	
	bw = 150; bh = 25;
	
	lw = 100; lh = 20;
	
	tw = round(w/2) - (10 + lw + 5 + 5);
	
	x1 = 10;
	x2 = x1 + lw + 5;
	x3 = round(w/2)+5;
	x4 = x3 + lw + 5;
	
	y1 = h - (20 + lh);
	y2 = y1 - (lh + 5);
	y3 = y2 - (lh + 5);
	y4 = y3 - (lh + 5);
	y5 = y4 - (lh + 5);
	y6 = y5 - (lh + 5);
	y7 = y6 - (lh + 5);
	
	% Load Data
	data = guidata(findobj('Tag','hSMAT'));
	
	% Calculate variables
	filename = '-';
	stackSize = 2;
	chL = 10;
	chPos = zeros(3,2);
	
	% LABEL - Filename
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String','Filename:',...
	   'Position',[x1 y1 lw lh]);
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String',filename,...
	   'Position',[x2 y1 w-(x2+10) lh],...
		'Tag','tme_label_filename');
	
	% LABEL - Stack Size
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String','Stack Size:',...
	   'Position',[x1 y2 lw lh]);
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String',sprintf('%g',stackSize),...
	   'Position',[x2 y2 tw lh],...
		'Tag','tme_label_stackSize');
	
	% LABEL - Channel Length
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String','Frame Length:',...
	   'Position',[x1 y3 lw lh]);
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String',sprintf('%g',chL),...
	   'Position',[x2 y3 tw lh],...
		'Tag','tme_label_channelLength');
	
	% LABEL - Channel Data
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String','Channel Data:',...
	   'Position',[x1 y5 lw 2*lh+5]);
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String',sprintf('Angle: %0.4g deg\nStart: x: %g\ty: %g',...
			chPos(3,1),...
			chPos(1,1),...
			chPos(2,1)),...
		'Tag','tme_label_channeldata',...
	   'Position',[x2 y5 tw 2*lh+5]);
	
	% LABEL - Channel Rotation
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String','Channel Rotation:',...
	   'Position',[x3 y3 lw 2*lh+5]);
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String','-',...
		'Tag','tme_label_channelRotation',...
	   'Position',[x4 y3 tw 2*lh+5]);
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
	% Store all GUI data
	guidata(findobj('Tag','hSMAT'),data);
		
end
function uiTraceSettingsPanel(hObject,eventdata,varargin)
	
	% Dimensions
	pos = get(hObject,'Position');
	
	w = pos(3); h = pos(4);
	
	bw = 40; bh = 25;
	
	tw = 60; th = 20;
	
	ew = 50; eh = 23;
	
	x1 = 10;
	x2 = x1 + tw;
	x3 = x2 + ew + 5;
	x4 = x3 + ew + 10;
	x5 = x4 + ew + 10;
	
	y1 = h - (25 + th);
	y2 = y1 - (th);
	y3 = y2 - (th + 5);
	y4 = y3 - (th + 5);
	y5 = y4 - (th + 5);
	y6 = y5 - (th + 5);
	y7 = y6 - (th + 5);
	y8 = y7 - (th + 5);
	y9 = y8 - (th + 5);
	
	% Load data structure
	data = guidata(findobj('Tag','hSMAT'));
	
	% Legend Axes
	hLegendAxes = axes(...
		'Parent',hObject,...
		'Units','pixels',...
		'Position',[w-155 y4 150 4*th],...
		'Visible','on');
	axis(hLegendAxes,'off',[1 200 0 1])
	
	% Set legend graphics lines
	line('Parent',hLegendAxes,'XData',[0 0],'YData',[0 0],...
		'Color','k','LineStyle',':','Marker','.','MarkerSize',18);
	line('Parent',hLegendAxes,'XData',[0 0],'YData',[0 0],...
		'Color','r','LineStyle','--','Marker','.','MarkerSize',18);
	line('Parent',hLegendAxes,'XData',[0 0],'YData',[0 0],...
		'Color','g','LineStyle','-','LineWidth',2);
	line('Parent',hLegendAxes,'XData',[0 0],'YData',[0 0],...
		'Color','m','LineStyle','-','LineWidth',2);
		
	% Label markers
	legend(hLegendAxes,...
		'Search Area',...
		'Pulse Width',...
		'Model Pulse',...
		'Fitted Pulse',...
		'Location','South');
	legend(hLegendAxes,'boxoff')
		
	% Number of pulses
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontAngle','normal',...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String','Pulses:',...
	   'Position',[x1 y2 60 th]);
	uicontrol(...
		'Parent',hObject,...
		'Style','edit',...
		'Tag','tme_edit_nPulses',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'String','1',...
	   'Position',[x2 y2 ew eh],...
		'Callback',{@UpdateAxes});
	
	% Pulse height
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontAngle','normal',...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String','Height:',...
	   'Position',[x1 y3 60 th]);
	uicontrol(...
		'Parent',hObject,...
		'Style','edit',...
		'Tag','tme_edit_pulseHeight',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'String','.7',...
	   'Position',[x2 y3 ew eh],...
		'Callback',{@UpdateAxes});
	
	% Pulse model note
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'HorizontalAlignment','left',...
		'String','Set pulse width and search area using interactive points in Data Display Panel.',...
	   'Position',[x3 y3 3*tw 2*(th+5)]);
	
	% Fit pulse model button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Fit pulse model',...
		'Position',[x1 y4 60+ew bh],...
		'Callback',{@FitPulseButton});
	
	% Show trace checkbox
	uicontrol(...
		'Parent',hObject,...
		'Style','checkbox',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'String','Show traced molecule',...
	   'Position',[x1 y6 200 eh],...
		'Tag','tme_chkbox_showTrace',...
		'Callback',{@UpdateAxes},...
		'Enable','on');
	
	% Trace tolerance
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'String','Trace Tolerance:',...
	   'HorizontalAlignment','left',...
		'Position',[x1 y7 ew+50 th-3]);
	uicontrol(...
		'Parent',hObject,...
		'Style','edit',...
		'Tag','tme_edit_traceTolerance',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'String','.5',...
	   'Position',[x1+50+ew y7-3 ew eh]);
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'String','Relative previous edge position.',...
	   'HorizontalAlignment','left',...
		'Position',[x1+55+2*ew y7 ew+170 th-3]);
	
	% Trace model through all frames button
	uicontrol(...
		'Parent',hObject,...
		'Units','pixels',...
		'Style','pushbutton',...
		'String','Trace Molecule',...
		'Position',[x1 y8 60+ew bh],...
		'Callback',{@TraceMoleculeButton});
	
	% Message label
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'Tag','att_label_traceMSG',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'String','',...
	   'Position',[x1+ew+60 y8 ew+40 th-3]);

	% Store all GUI data
	data.tme.traced = false;
	guidata(findobj('Tag','hSMAT'),data);
	
end
function uiFilterPanel(hObject,eventdata,varargin)
	
	% Dimensions
	pos = get(hObject,'Position');
	
	w = pos(3);
	h = pos(4);
	
	bw = 40;
	bh = 20;
	
	tw = 90;
	th = 20;
	
	ew = 50;
	eh = 23;
	
	x1 = 10;
	x2 = x1 + tw;
	x3 = x2 + ew + 10;
	x4 = x3 + ew + 10;
	x5 = x4 + ew + 10;
	
	y1 = h - (20 + th);
	y2 = y1 - th - 5;
	y3 = y2 - th - 5;
	y4 = y3 - th - 5;
	
	% Titles
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'String','(1)',...
	   'Position',[x2 y1 ew th]);
	
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'String','(2)',...
	   'Position',[x3 y1 ew th]);
	
	% Gaussian
	uicontrol(...
		'Parent',hObject,...
		'Style','checkbox',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'String','Gausian',...
		'TooltipString','Symmetric Gaussian lowpass filter of size (1), and standard deviation (2)',...
	   'Position',[x1 y2 tw eh],...
		'Tag','att_filt_gauss_0',...
		'Callback',{@AdjustImage,'gaussian'},...
		'Enable','on');

	% Size
	uicontrol(...
		'Parent',hObject,...
		'Style','edit',...
		'Tag','att_filt_gauss_1',...
		'TooltipString','Symmetric Gaussian lowpass filter of size (1), and standard deviation (2)',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'Callback',{@AdjustImage,'gaussian'},...
		'String','5',...
	   'Position',[x2 y2 ew eh]);
	
	% Width
	uicontrol(...
		'Parent',hObject,...
		'Style','edit',...
		'Tag','att_filt_gauss_2',...
		'TooltipString','Symmetric Gaussian lowpass filter of size (1), and standard deviation (2)',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',10,...
		'Callback',{@AdjustImage,'gaussian'},...
		'String','2',...
	   'Position',[x3 y2 ew eh]);
	
	% Note
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',8,...
		'HorizontalAlignment','left',...
		'String','Symmetric Gaussian lowpass filter of size (1), and standard deviation (2)',...
	   'Position',[x4 y2 w-(x4+5) eh]);
	
	% Average
	uicontrol(...
		'Parent',hObject,...
		'Style','checkbox',...
		'TooltipString','Averageing filter of length (1) in time',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'String','Average',...
	   'Position',[x1 y3 tw eh],...
		'Callback',{@AdjustImage,'average'},...
		'Tag','att_filt_avr_0',...
		'Enable','on');

	% Size
	uicontrol(...
		'Parent',hObject,...
		'Style','edit',...
		'TooltipString','Averageing filter of length (1) in time',...
		'Tag','att_filt_avr_1',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'Callback',{@AdjustImage,'average'},...
		'FontSize',10,...
		'String','2',...
	   'Position',[x2 y3 ew eh]);
	
	% Note
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',8,...
		'HorizontalAlignment','left',...
		'String','Averageing filter of width (1)',...
	   'Position',[x4 y3 w-(x4+5) eh]);
	
	% Sgo-Lay
	uicontrol(...
		'Parent',hObject,...
		'Style','checkbox',...
		'TooltipString','Savitzky-Golay FIR filter of length (1), and order (2) < (1)',...
		'Units','pixels',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'FontSize',10,...
		'String','Sgo-Lay',...
	   'Position',[x1 y4 tw eh],...
		'Callback',{@AdjustImage,'sgo-lay'},...
		'Tag','att_filt_sgolay_0',...
		'Enable','on');
	
	% Length
	uicontrol(...
		'Parent',hObject,...
		'Tag','att_filt_sgolay_1',...
		'TooltipString','Savitzky-Golay FIR filter of length (1), and order (2) < (1)',...
		'Style','edit',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'Callback',{@AdjustImage,'sgo-lay'},...
		'FontSize',10,...
		'String','10',...
	   'Position',[x2 y4 ew eh]);
	
	% Order
	uicontrol(...
		'Parent',hObject,...
		'Style','edit',...
		'TooltipString','Savitzky-Golay FIR filter of length (1), and order (2) < (1)',...
		'Tag','att_filt_sgolay_2',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'Callback',{@AdjustImage,'sgo-lay'},...
		'FontSize',10,...
		'String','5',...
	   'Position',[x3 y4 ew eh]);
	
	% Note
	uicontrol(...
		'Parent',hObject,...
		'Style','text',...
		'BackgroundColor',get(findobj('Tag','hSMAT'),'Color'),...
		'Units','pixels',...
		'FontSize',8,...
		'HorizontalAlignment','left',...
		'String','Savitzky-Golay FIR filter of length (1), and order (2) < (1)',...
	   'Position',[x4 y4 w-(x4+5) eh]);
	
end

%%%%%%%%%%%%%%%%%%%%
% Button functions %
% ================ %
%%%%%%%%%%%%%%%%%%%%
function DistributionsButton(hObject,eventdata,varargin)
	
	% Load data structure
	data = guidata(findobj('Tag','hSMAT'));
	
	if data.tme.traced
		LengthDriftDistributions;
	else
		disp('Trace molecule first!');
		return;
	end
	
end
function LoadTIFButton(hObject,eventdata,varargin)
	
	LoadNewData;
	
end
function SaveButton(hObject,eventdata,varargin)
	
	% Load data structure
	data = guidata(findobj('Tag','hSMAT'));
	
	if data.tme.traced
		SaveEdges;
	else
		disp('Trace molecule first!');
		return;
	end
	
end
function CloseButton(hObject,eventdata,varargin)
	
	close(findobj('Tag','hTME'));
	
end
function FitPulseButton(hObject,eventdata,varargin)
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
	% Get data
	currentTT = data.tme.currentTT;
	fNr = data.tme.fNr;
	chL = data.tme.channelLength;
	intLim = data.tme.intLim;
	px1 = round(data.tme.pulsePos(1));
	px2 = round(data.tme.pulsePos(3));
	sx1 = round(data.tme.searchPos(1));
	sx2 = round(data.tme.searchPos(3));
	minSX = min(sx1,sx2);
	maxSX = max(sx1,sx2);
	nPulses = str2num(get(findobj('Tag','tme_edit_nPulses'),'String'));
	pulseHeight = str2num(get(findobj('Tag','tme_edit_pulseHeight'),'String'));
	
	% Get intensity data within search area
	x = minSX:maxSX;
	dx = length(x);
	intensity = currentTT(fNr,minSX:maxSX);
	
	% Rescale intensity to [0 1]
	intensity = scaleToUnity(intensity,intLim(3:4));
	
	% Calc. initial pulse params.
	x0 = (max(px1,px2) + min(px1,px2))/2;
	L0 =  max(px1,px2) - min(px1,px2);
	
	% Set initial pulse params.
	p(1:2,1) = 0;	% I1 & I2
	p(1,2) = x0;	% x0
	p(2,2) = 20;	% sigma
	p(1,3:3+nPulses-1) = pulseHeight;% A0
	p(2,3:3+nPulses-1) = L0; 			% L0
	
	% Distribute pulses if nPulses > 1
	if (nPulses > 1)
		% Lx
		p(2,3:3+nPulses-1) = (p(2,3:3+nPulses-1) ./ sum(p(2,3:3+nPulses-1))) .* L0;
		% Ax
		p(1,4:2:2+nPulses) = .6*pulseHeight;% A0
	end
	
	% Fit parameters to data
	warning off;
	pHat = nlinfit(x,intensity,@modelPulse,p);
	warning on;
	
	% Store all GUI data
	data.tme.pCalc = pHat;
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update axes and plots
	UpdateAxes;
	
end
function TraceMoleculeButton(hObjevt,eventdata,varargin)
	
	% Set trace message
	set(findobj('Tag','att_label_traceMSG'),'String','Tracing...');
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
	% Get data
	tt = double(imread([data.tme.pathname,data.tme.filename],1)); 
	px1 = round(data.tme.pulsePos(1));
	px2 = round(data.tme.pulsePos(3));
	sx1 = round(data.tme.searchPos(1));
	sx2 = round(data.tme.searchPos(3));
	nFrames = data.tme.nFrames;
	fNr = data.tme.fNr;
	currentTT = data.tme.currentTT;
	intLim = data.tme.intLim;
	chL = data.tme.channelLength;
	
	% Calculate variable
	minSX = min(sx1,sx2);
	maxSX = max(sx1,sx2);
	nPulses = str2num(get(findobj('Tag','tme_edit_nPulses'),'String'));
	pulseHeight = str2num(get(findobj('Tag','tme_edit_pulseHeight'),'String'));
	tol = str2num(get(findobj('Tag','tme_edit_traceTolerance'),'String'));
	
	% Get intensity data within search area
	x = minSX:maxSX;
	dx = length(x);
	intensity = currentTT(fNr,minSX:maxSX);
	
	% Rescale intensity to [0 1]
	yInt = get(get(findobj('Tag','dataPulseLine'),'Parent'),'YLim');
	intensity = scaleToUnity(intensity,intLim(3:4));
	
	% Calc. initial pulse params.
	x0 = (max(px1,px2) + min(px1,px2))/2;
	L0 =  max(px1,px2) - min(px1,px2);
	
	% Set initial pulse params.
	p(1:2,1) = 0;	% I1 & I2
	p(1,2) = x0;	% x0
	p(2,2) = 20;	% sigma
	p(1,3:3+nPulses-1) = pulseHeight;% A0
	p(2,3:3+nPulses-1) = L0; 			% L0
	
	% Distribute pulses if nPulses > 1
	if (nPulses > 1)
		% Lx
		p(2,3:3+nPulses-1) = (p(2,3:3+nPulses-1) ./ sum(p(2,3:3+nPulses-1))) .* L0;
		% Ax
		p(1,4:2:2+nPulses) = .6*pulseHeight;% A0
	end
	
	% Initialize result data
	tracedTT = currentTT;
	x0 = zeros(1,nFrames);
	Lx = zeros(1,nFrames);
	prevFrame = 0;
	chk = true;
	
	% Trace all frames
	for f = fNr : nFrames+fNr-1
		
		% Calc. correct frame
		if (f <= nFrames)
			frame = f;
		else
			frame = f - nFrames;
		end
		
		% Get intensity from current
		intensity = scaleToUnity(currentTT(frame,minSX:maxSX),intLim(3:4));
		
		% Fit parameters to data
		warning off;
		p = nlinfit(x,intensity,@modelPulse,p);
		warning on;
		
		if (f == fNr)
			pFirst = p;
		end
		
		% Get fitted pulse
		fittedPulse = modelPulse(p,1:chL);
		
		% Get molecule meta data
		x0(frame) = p(1,2);
		Lx(frame) = sum(p(2,3:end));
		
		% Save data
		data.tme.moleculeLength = Lx;
		data.tme.moleculeCenter = x0;
		data.tme.fNr = frame;
		data.tme.pCalc = p;
		guidata(findobj('Tag','hSMAT'),data);
		
		% Update axes and plots
		UpdateAxes;
		
		% Check molecule within tolerance
		if (prevFrame > 0)
			ml = data.tme.moleculeLength(frame);
			mlPrev = data.tme.moleculeLength(prevFrame);
			if ( abs(ml-mlPrev) > tol*mlPrev )
				set(findobj('Tag','att_label_traceMSG'),'String','Trace failed!');
				chk = false;
				break;
			end
		end
		
		% Counter
		prevFrame = frame;
		
	end
	
	% Set end message and enable features panel
	if (chk)
		set(findobj('Tag','att_label_traceMSG'),'String','Trace done!');
	end
	set(findobj(get(findobj('Tag','tme_panel_moleculeFeatures'),'Children'),'Enable','off'),'Enable','on');
	
	% Store all GUI data
	data.tme.traced = true;
	data.tme.fNr = fNr;
	data.tme.pCalc = pFirst;
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update axes and plots
	UpdateAxes;
	
end
function ExtractPlotsButton(hObject,varargin)

hFig = varargin{2};

hNewFig = figure('Colormap',hot);

hAxes = copyobj(findobj(hFig,'Type','Axes'),hNewFig);


end

function AlignTTButton(hObject,varargin)
% Load data struct
data = guidata(findobj('Tag','hSMAT'));
nargin
% Get data
tt = double(imread([data.tme.pathname,data.tme.filename],1));
x0 = data.tme.moleculeCenter;

pad = min(min(tt));

shiftPos = round(x0-x0(1));
alignedTT = tt;
for i = 1:size(tt, 1)
    
	temp = tt(i, :);
    if shiftPos(i) == 0
        
    elseif shiftPos(i)>0
        temp(1:abs(shiftPos(i))) = [];
        temp = [temp, ones(1, abs(shiftPos(i)))*pad]; 
        alignedTT(i, :) = temp;
    else
        temp(end-abs(shiftPos(i))+1:end) = [];
        temp = [ones(1, abs(shiftPos(i)))*pad, temp];
        alignedTT(i, :) = temp;
    end
end
data.tme.currentTT = alignedTT;
guidata(findobj('Tag','hSMAT'), data);

if nargin > 4
    
    saveFileName = ['CenterAligned_',strtok(varargin{2},'.')];
    savePathName = varargin{1};
    
else
    
 % Get save path and name
    [saveFileName,savePathName,saveFilterIndex] = uiputfile(...
        {'*.tif'},...
        'Save aligned time trace...',...
        ['CenterAligned_',strtok(data.tme.filename,'.')]);
    if ( saveFileName == 0 )
        disp('No file name selected... save failed!')
        return
    end
end
	% Write to tiff file
	imwrite(...
		uint16(alignedTT),...
		[ savePathName, strtok(saveFileName,'.') '.tif'],...
		'WriteMode','overwrite');

% Update axes
UpdateAxes;
	
end

function BatchButton(hObject, varargin)


[filename, pathname] = uigetfile({'*.tif'}, 'Select TIF files', 'MultiSelect', 'on');

switch iscell(filename)
    case 1
        if cellfun('isempty', filename)
            disp('Error! No (or wrong) file selected!')
            return
        end
    case 0
            disp('Batch means that you should choose MULTIPLE files.')
            return
end

errCount = 0;

for fileNum = 1:length(filename)
    fileNum
LoadNewData({pathname, filename{fileNum}});
try
TraceMoleculeButton;
catch error
   errCount = errCount+1;
    continue; 
end
SaveEdges(pathname, filename{fileNum});
AlignTTButton(hObject, pathname, filename{fileNum}, 1, 1);

end
if errCount == 0
disp('All files saved sucessfully');
else
    disp(strcat(num2str(errCount), ' files flipped out and need to be redone manually. Good Luck!'));
end
end

%%%%%%%%%%%%%%%%%%%%%%
% Callback functions %
% ================== %
%%%%%%%%%%%%%%%%%%%%%%
function ScrollFrame(hObject,eventdata,varargin)
	
	% Get scroll value
	fNr = get(hObject,'Value');
	fNr = round(fNr);
	set(hObject,'Value',fNr);
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
	% Store all GUI data
	data.tme.fNr = fNr;
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update
	UpdateAxes;
	
end
function SearchPoint1Move(pos)
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
	% Calc int pos
	sx1 = round(pos(1));
	sx2 = round(data.tme.searchPos(3));
	
	% Store all GUI data
	data.tme.searchPos(1:2) = pos;
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update Axes
	UpdateAxes;
	
end
function SearchPoint2Move(pos)
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
	% Calc int pos
	sx1 = round(data.tme.searchPos(1));
	sx2 = round(pos(1));
	
	% Store all GUI data
	data.tme.searchPos(3:4) = pos;
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update Axes
	UpdateAxes;
	
end
function Point1Move(pos)
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	chL = data.tme.channelLength;
	intLim = data.tme.intLim;
	selTools = data.tme.selTools;
	
	% Calc int pos of point 1&2
	x1 = round(pos(1));
	x2 = round(data.tme.pulsePos(3));
	
	% Update search area constraint function
	minX = min(x1,x2);
	maxX = max(x1,x2);
	yPos = round( ( max(intLim(3:4))-min(intLim(3:4)) )/2 ).*[1 1];
	fcn1 = makeConstrainToRectFcn('impoint',[1 minX],yPos);
	fcn2 = makeConstrainToRectFcn('impoint',[maxX chL],yPos);
	setPositionConstraintFcn(selTools(3),fcn1);
	setPositionConstraintFcn(selTools(4),fcn2);
	
	% Store all GUI data
	data.tme.pulsePos(1:2) = pos;
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update Axes
	UpdateAxes;

end
function Point2Move(pos)
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	chL = data.tme.channelLength;
	intLim = data.tme.intLim;
	selTools = data.tme.selTools;
	
	% Calc int pos of point 1&2
	x1 = round(data.tme.pulsePos(1));
	x2 = round(pos(1));
	
	% Update search area constraint function
	minX = min(x1,x2);
	maxX = max(x1,x2);
	yPos = round( ( max(intLim(3:4))-min(intLim(3:4)) )/2 ).*[1 1];
	fcn1 = makeConstrainToRectFcn('impoint',[1 minX],yPos);
	fcn2 = makeConstrainToRectFcn('impoint',[maxX chL],yPos);
	setPositionConstraintFcn(selTools(3),fcn1);
	setPositionConstraintFcn(selTools(4),fcn2);
	
	% Store all GUI data
	data.tme.pulsePos(3:4) = pos;
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update Axes
	UpdateAxes;
	
end
function AdjustImage(hObject,eventdata,varargin)
	
	filterNames = {...
		'gaussian';...
		'average';...
		'sgo-lay'};
	filterTypes = {...
		'att_filt_gauss_0';...
		'att_filt_avr_0';...
		'att_filt_sgolay_0'};
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
	nFrames = data.tme.nFrames;
	
	% Get original TT
	tt = double(imread([data.tme.pathname,data.tme.filename],1));
	
	% Add filters
	for i = 1 : length(filterNames)
		
		if (get(findobj('Tag',filterTypes{i}),'Value'))
			
			switch filterTypes{i}
			case 'att_filt_gauss_0'

				% Get paramters
				p(1) = str2num(get(findobj('Tag','att_filt_gauss_1'),'String'));
				p(2) = str2num(get(findobj('Tag','att_filt_gauss_2'),'String'));
				
				% Design filter
				x = (1:p(1))-(1+p(1)/2);
				b = exp( -(x.^2)./(2.*p(2).^2) );
				b = b ./ sum(b);
				
				% Set filter
				tt = filtfilt(b,1,tt')';
			
			case 'att_filt_avr_0'

				% Get paramters
				p(1) = str2num(get(findobj('Tag','att_filt_avr_1'),'String'));
				
				% Design filter
				b = ones(1,p(1))/p(1);
				
				% Set filter
				tt = filtfilt(b,1,tt);
				
				% Fix ends so that they are also affected
				for i = 1:1:ceil(p(1)/2)
					tt(i, :) = tt(ceil(p(1)/2)+1, :);
				end
				for i = nFrames:-1:nFrames-ceil(p(1)/2)
					tt(i, :) = tt(nFrames-ceil(p(1)/2)-1, :);
				end
				
			case 'att_filt_sgolay_0'
				
				% Get parameters
				p(1) = str2num(get(findobj('Tag','att_filt_sgolay_1'),'String'));
				p(2) = str2num(get(findobj('Tag','att_filt_sgolay_2'),'String'));
				
				% Adjust parameters to allowed values
				if (p(1) <= p(2) )
					p(1) = p(2) + 1;
				end
				if ( mod(p(1),2)==0)
					p(1) = p(1) + 1;
				end
				
				% Filter
				tt = sgolayfilt(tt',p(2),p(1))';

			end
			
		end
		
	end
	
	% Store all GUI data
	data.tme.currentTT = tt;
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update all axes
	UpdateAxes;
	
end

%%%%%%%%%%%%%%%%%%%
% Other functions %
% =============== %
%%%%%%%%%%%%%%%%%%%
function map = TraceMap(data,x0,Lx)
	
	% Get data
	nFrames = size(data,1);
	map = zeros(size(data));
	
	% Trace all frames
	for f = 1 : nFrames
		
		% Get logic position of molecule if none all true
		if (x0(f)>0)
			map(f,round(x0(f)-Lx(f)/2):round(x0(f)+Lx(f)/2)) = 1;
		else
			map(f,:) = 1;
		end
		
	end
	
end
function SetAxes(varargin)
	
	% Load data structure
	data = guidata(findobj('Tag','hSMAT'));
	intLim = data.tme.intLim;
	searchLim = data.tme.searchLim;
	pulseStart = data.tme.pulseStart;
	chL = data.tme.channelLength;
	nFrames = data.tme.nFrames;
	filename = data.tme.filename;
	
	% Time Trace Axes
	axis(get(findobj('Tag','att_imgsc_TT'),'Parent'),...
		'xy','tight');
	
	% Current Frame Axes
	axis(findobj('Tag','att_ax_currentFrame'),...
		intLim);
	
	ResetLabels;
	
end
function UpdateAxes(varargin)
	
	% Load data structure
	data = guidata(findobj('Tag','hSMAT'));
	
	% Get Data
	x0 = round(data.tme.moleculeCenter);
	currentTT = data.tme.currentTT;
	x0 = data.tme.moleculeCenter;
	Lx = data.tme.moleculeLength;
	fNr = data.tme.fNr;
	chL = data.tme.channelLength;
	intLim = data.tme.intLim;
	nFrames = data.tme.nFrames;
	px1 = round(data.tme.pulsePos(1));
	px2 = round(data.tme.pulsePos(3));
	sx1 = round(data.tme.searchPos(1));
	sx2 = round(data.tme.searchPos(3));
	pCalc = data.tme.pCalc;
	
	% Time Trace Axes
	if (get(findobj('Tag','tme_chkbox_showTrace'),'Value'))
		lMap = TraceMap(currentTT,x0,Lx);
		map = currentTT.*lMap + intLim(3).*~lMap;
		set(findobj('Tag','att_imgsc_TT'),...
			'CData',map,...
			'Visible','on');
	else
		set(findobj('Tag','att_imgsc_TT'),...
			'CData',data.tme.currentTT,...
			'Visible','on');
	end
	set(findobj('Tag','att_hCenterTrace'),...
		'XData',x0,...
		'YData',1:length(x0));
	
	% Frame number
	set(findobj('Tag','att_line_frameNr'),...
		'XData',[1 chL],...
		'YData',fNr.*[1 1]);
	set(findobj('Tag','att_label_frameNr'),...
		'String',sprintf('Frame number %g',fNr));
	set(findobj('Tag','att_tt_scrollbar'),...
		'Enable','on',...
		'Max',nFrames,...
		'Min',1,...
		'SliderStep',[1 10] / (nFrames-1),...
		'Value',fNr);
	
	% Get pulse data
	nPulses = str2num(get(findobj('Tag','tme_edit_nPulses'),'String'));
	pulseHeight = str2num(get(findobj('Tag','tme_edit_pulseHeight'),'String'));
	
	% Calc puls parameters
	centerPoint = (max(px1,px2)+min(px1,px2))/2;
	pulseWidth =  max(px1,px2) - min(px1,px2);
	
	% Set initial pulse params.
	p(1:2,1) = 0;			% I1 & I2
	p(1,2) = centerPoint;% x0
	p(2,2) = 20;			% sigma
	p(1,3:3+nPulses-1) = pulseHeight;% A0
	p(2,3:3+nPulses-1) = pulseWidth; % L0
	
	% Distribute pulses if nPulses > 1
	if (nPulses > 1)
		% Lx
		p(2,3:3+nPulses-1) = (p(2,3:3+nPulses-1) ./ sum(p(2,3:3+nPulses-1))) .* pulseWidth;
		% Ax
		p(1,4:2:2+nPulses) = .6*pulseHeight;
	end
	
	% Get pulse and rescale
	pulse = rescaleVar(modelPulse(p,min(sx1,sx2):max(sx1,sx2)),intLim(3:4));
	pulse2 = rescaleVar(modelPulse(pCalc,min(sx1,sx2):max(sx1,sx2)),intLim(3:4));
	
	% Current Frame Axes
	% Intensity
	set(findobj('Tag','att_line_current_1'),...
		'XData',1:chL,...
		'YData',currentTT(fNr,:));
	set(findobj('Tag','att_line_current_2'),...
		'XData',min(sx1,sx2):max(sx1,sx2),...
		'YData',currentTT(fNr,min(sx1,sx2):max(sx1,sx2)));
	% Pulse models
	set(findobj('Tag','att_line_pulse_1'),...
		'XData',min(sx1,sx2):max(sx1,sx2),...
		'YData',pulse);
	set(findobj('Tag','att_line_pulse_2'),...
		'XData',min(sx1,sx2):max(sx1,sx2),...
		'YData',pulse2);
	% Selection tool markers
	set(findobj('Tag','att_line_selMark_1'),...
		'XData',min(sx1,sx2).*[1 1],...
		'YData',intLim(3:4));
	set(findobj('Tag','att_line_selMark_2'),...
		'XData',max(sx1,sx2).*[1 1],...
		'YData',intLim(3:4));
	set(findobj('Tag','att_line_selMark_3'),...
		'XData',min(px1,px2).*[1 1],...
		'YData',intLim(3:4));
	set(findobj('Tag','att_line_selMark_4'),...
		'XData',max(px1,px2).*[1 1],...
		'YData',intLim(3:4));
	
	drawnow;
	
end
function UpdateSelectionTools(varargin)
	
	% Load data structure
	data = guidata(findobj('Tag','hSMAT'));
	selTools = data.tme.selTools;
	intLim = data.tme.intLim;
	chL = data.tme.channelLength;
	searchLim = data.tme.searchLim;
	pulseStart = data.tme.pulseStart;
	
	% Calc new varables
	yPos = round( ( max(intLim(3:4))-min(intLim(3:4)) )/2 + min(intLim(3:4)) );
	% Update selection tools
	% Update constrain functions
	fcn = makeConstrainToRectFcn('impoint',[1 chL],yPos.*[1 1]);
	setPositionConstraintFcn(selTools(1),fcn);
	setPositionConstraintFcn(selTools(2),fcn);
	fcn = makeConstrainToRectFcn('impoint',[1 pulseStart(1)],yPos.*[1 1]);
	setPositionConstraintFcn(selTools(3),fcn);
	fcn = makeConstrainToRectFcn('impoint',[pulseStart(1) chL],yPos.*[1 1]);
	setPositionConstraintFcn(selTools(4),fcn);
	% Update positions
	setPosition(selTools(1),[pulseStart(1) yPos]);
	setPosition(selTools(2),[pulseStart(2) yPos]);
	setPosition(selTools(3),[searchLim(1) yPos]);
	setPosition(selTools(4),[searchLim(2) yPos]);
	
end
function Y = stretchSelection(X,sel,s)
	
	% Adjust edges to within map
	if (sel(1) < 2)
		sel(1) = 2;
	end
	if (sel(2) > length(X) - 1)
		sel(2) = length(X) - 1;
	end
	
	% Get molecule
	m = X(sel(1):sel(2));

	% Stretch molecule
	Y = imresize(m,[1 s],'nearest');
		
end
function LoadNewData(varargin)
	
if nargin == 1
    name = varargin{1};
    pathname = name{1};
    filename = name{2}; 
else
% Get filename and path with "uigetfile"
	[filename, pathname] = uigetfile('*.tif', 'Select data (TIF) file to load.');
	if ( filename == 0 )
		return
    end

end

		full_filename = [ pathname, filename ];
	
	% Get image data
	currentTT = double(imread(full_filename,1));
	[nFrames chL] = size(currentTT);
	
	stackSize = numel(imfinfo(full_filename));
	rotated = 0;
    
	% If metadata exists
	if (stackSize>1)
		metaFrame = double(imread(full_filename,2));
		
		% Decode meta data
		chPos = zeros(3,2);
		chPos(1:2,1:2) = metaFrame(1:2,1:2);
		chPos(3,1:2) = metaFrame(3,1:2)./1000;
		
		if (metaFrame(3,1) > 0)
			chPos(3,1) = -1*chPos(3,1);
		end
		if (metaFrame(3,2) > 0)
			chPos(3,2) = -1*chPos(3,2);
		end
		if (metaFrame(4,1) > 0)
			rotated = 1;
		end
		
	else
		
		chPos = zeros(3,2);
		rotated = 0;
		
	end
	
	% Load data structure
	data = guidata(findobj('Tag','hSMAT'));
	selTools = data.tme.selTools;
	
	% Calc new varables
	fNr = 1;
	intLim = [1 chL min(min(currentTT)) max(max(currentTT))];
	searchLim = round([1 chL]);
	pulseStart = round(chL.*[.375 .625]);
	yPos = round( ( max(intLim(3:4))-min(intLim(3:4)) )/2 );
	pulsePos = [pulseStart(1) yPos pulseStart(2) yPos];
	searchPos = [searchLim(1) yPos searchLim(2) yPos];
	
	% Set initial pulse params.
	p(1:2,1) = 0;			% I1 & I2
	p(1,2) = chL/2;% x0
	p(2,2) = 20;			% sigma
	p(1,3:3+1-1) = .1;% A0
	p(2,3:3+1-1) = 1; % L0
	
	% Store all GUI data
	data.tme.filename = filename;
	data.tme.pathname = pathname;
	
	data.tme.chPos = chPos;
	data.tme.rotated = rotated;
	
	data.tme.nFrames = nFrames;
	data.tme.channelLength = chL;
	data.tme.currentTT = currentTT;
	data.tme.traceMap = ones(size(currentTT));
	data.tme.moleculeCenter = zeros(1,nFrames);
	data.tme.moleculeLength = zeros(1,nFrames);
	
	data.tme.fNr = fNr;
	data.tme.intLim = intLim;
	data.tme.searchLim = searchLim;
	data.tme.pulseStart = pulseStart;
	data.tme.searchPos = searchPos;
	data.tme.pulsePos = pulsePos;
	data.tme.pCalc = p;
	
	guidata(findobj('Tag','hSMAT'),data);
	
	% Update selection tools
	UpdateSelectionTools;
	
	% Update axes
	UpdateAxes;
	
	% Set Axes limits
	SetAxes;
	
end
function ResetLabels(varargin)
	
	% Load Data
	data = guidata(findobj('Tag','hSMAT'));
	
	filename = data.tme.filename;
	channelLength = data.tme.channelLength;
	nFrames = data.tme.nFrames;
	chPos = data.tme.chPos;
	rotated = data.tme.rotated;
	
	% Data Info Panel
	set(findobj('Tag','tme_label_filename'),'String',filename);
	set(findobj('Tag','tme_label_stackSize'),'String',sprintf('%g',nFrames));
	set(findobj('Tag','tme_label_channelLength'),'String',sprintf('%g',channelLength));
	set(findobj('Tag','tme_label_channeldata'),...
		'String',sprintf('Angle: %0.4g deg\nStart: x: %g\ty: %g',...
			chPos(3,1),...
			chPos(1,1),...
			chPos(2,1)));
	set(findobj('Tag','tme_label_channelRotation'),'String',sprintf('%g',rotated));
			
end
function SaveEdges(varargin)
	
	% Load data struct
	data = guidata(findobj('Tag','hSMAT'));
	
    
    if nargin >= 2
    
    saveFileName = ['SMAT_TME_',strtok(varargin{2},'.')];
    savePathName = varargin{1};
    
else
	% Get save path and name
	[saveFileName,savePathName,saveFilterIndex] = uiputfile(...
		{'*.csv'},...
		'Save molecule edges',...
		['SMAT_TME_',strtok(data.tme.filename,'.')]);
	if ( saveFileName == 0 )
		disp('No saveFileName...')
		return
	end
    end
	dlmwrite(...
		[ savePathName, strtok(saveFileName,'.') '.csv'],...
	 	[data.tme.moleculeLength;data.tme.moleculeCenter],...
	 	'precision', '%.6f', ...
		'newline', 'pc');
		
end


